Getting the beaglebone to route through the usb net connection to the wide
internet via your Fedora host computer (some other ubuntu based instructions
don't seem to quite work.)

From: http://robotic-controls.com/learn/beaglebone/beaglebone-internet-over-usb-only

On the BeagleBone side:
# /sbin/route add default gw 192.168.7.1
# echo "nameserver 8.8.8.8" > /etc/resolv.conf

On Linux (Fedora) computer:
  (on my system the wifi interface is wlp3s0, the usb interface to the 
   beaglebone is enp0s20u1)
# iptables --table nat --append POSTROUTING --out-interface wlp3s0 -j MASQUERADE
# iptables --append FORWARD --in-interface enp0s20u1 -j ACCEPT
# echo 1 > /proc/sys/net/ipv4/ip_forward

On my home desktop:
# iptables --table nat --append POSTROUTING --out-interface enp7s0 -j MASQUERADE
# iptables --append FORWARD --in-interface enp0s22f2u2 -j ACCEPT
# echo 1 > /proc/sys/net/ipv4/ip_forward

Network config: (required before beaglebone dns lookups will actually work)
-> Select usb ethernet interface
-> Select gear icon for settings.
-> Select identity
-> Firewall Zone -> trusted

Finally, turn off usb ethernet and reactivate it.


# for really old wheezy installs (like what might come onboard the
# beaglebone when you first purchase it ... if you don't update the
# root image.)

  If apt-get upgrade fails with odd led_aging.sh messages, then:
  Replace the existing /etc/init.d/led_aging.sh script with:

  #!/bin/sh -e
  ### BEGIN INIT INFO
  # Provides:          led_aging.sh
  # Required-Start:    $local_fs
  # Required-Stop:     $local_fs
  # Default-Start:     2 3 4 5
  # Default-Stop:      0 1 6
  # Short-Description: Start LED aging
  # Description:       Starts LED aging (whatever that is)
  ### END INIT INFO

  x=$(/bin/ps -ef | /bin/grep "[l]ed_acc")
  if [ ! -n "$x" -a -x /usr/bin/led_acc ]; then
     /usr/bin/led_acc &
  fi


# Beaglebone 8.6 (jessie) setup:

- /boot/uEnv.txt:
    # AuraUAS
    cape_disable=bone_capemgr.disable_partno=BB-BONELT-HDMI,BB-BONELT-HDMIN
    cape_enable=bone_capemgr.enable_partno=BB-UART1,BB-UART2,BB-UART4

# remove wicd
- apt-get remove python-wicd wicd-cli wicd wicd-curses wicd-daemon wicd-gtk wicd-kde

# then fix up /etc/network/interfaces for eth0

# remove stuff we don't need that could cause performance disruptions

- apt-get remove --purge nodejs
- apt-get remove --purge xrdp
- apt-get remove --purge tightvncserver
- apt-get remove --purge lxqt-common lxqt-panel lxqt-runner lxqt-session 
- apt-get remove --purge apache2 apache2-bin apache2-data apache2-utils

- apt-get autoremove    # remove remaining unused dependencies

# remove stuff that takes up disk space
  - dpkg-query -W --showformat='${Installed-Size;10}\t${Package}\n' | sort -k1,1n
  - apt remove --purge ti-llvm-3.6 chromium-browser
  - apt remove --purge c9-core-installer libllvm3.9 ti-opencl firmware-am57xx-opencl-monitor bone101 oxygen-icon-theme
  - apt remove upm libllvm3.5

# Remove any abandoned packages (installed previously to support
# something that was removed and is no longer needed.)

  - apt-get autoremove

# Upgrade system to latest security and bug fix patches

- apt update
- apt upgrade


# Install extra required and/or useful things

- apt install telnet minicom python-lxml libeigen3-dev zlib1g-dev
- apt install libboost-python-dev

# disable service (for good measure), ok if these aren't found now

- systemctl disable jekyll-autorun.service
- systemctl disable bonescript-autorun.service
- systemctl disable apache2.service


# Force highest peformance mode

- vi /etc/init.d/cpufrequtils (line #43)

  GOVERNOR="performance"


# (future todo ...)

- see if we can complete disable debian user autologin stuff, and/or
  migrate aura over to run under the debian user instead of root.


# Upgrade stock kernel (for sure do this for older wheezy install to
  get far better uart performance)

  http://elinux.org/Beagleboard:BeagleBoneBlack_Debian#Kernel_Upgrade

  cd /opt/scripts/tools/
  git pull
  ./update_kernel.sh
  reboot

  linux-firmware-image-3.8.13-bone80 (1wheezy)

# setup swap file (ex: if needed for giant boost/python compiles)

 mkdir -p /var/cache/swap/
 dd if=/dev/zero of=/var/cache/swap/swapfile bs=1M count=(size in MB)
 chmod 0600 /var/cache/swap/swapfile
 mkswap /var/cache/swap/swapfile
 swapon /var/cache/swap/swapfile
