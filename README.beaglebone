June 20, 2017:  Last tested with bone-debian-8.7-iot-armhf-2017-03-19-4gb.img

Update your beaglebone to the newest root image:

    https://beagleboard.org/latest-images

To create an updater sd card from a linux host (example):

    dd if=bone-debian-8.7-iot-armhf-2017-03-19-4gb.img of=/dev/sdd bs=1M

Boot the newly flashed beaglebone and login as debian/temppwd

    $ sudo bash
    # adduser aura
      password: aura
      Full Name []: AuraUAS
    # usermod -aG admin aura
      
Getting the beaglebone to route through the usb net connection to the wide
internet via your Fedora host computer (some other ubuntu based instructions
don't seem to quite work.)

From: http://robotic-controls.com/learn/beaglebone/beaglebone-internet-over-usb-only

On the BeagleBone side:
# /sbin/route add default gw 192.168.7.1
# echo "nameserver 8.8.8.8" > /etc/resolv.conf

On Linux (Fedora) computer:
  (on my system the wifi interface is wlp3s0, the usb interface to the 
   beaglebone is enp0s20u1)
# iptables --table nat --append POSTROUTING --out-interface wlp3s0 -j MASQUERADE
# iptables --append FORWARD --in-interface enp0s20u1 -j ACCEPT
# echo 1 > /proc/sys/net/ipv4/ip_forward

On my home desktop:
# iptables --table nat --append POSTROUTING --out-interface enp7s0 -j MASQUERADE
# iptables --append FORWARD --in-interface enp0s22f2u2 -j ACCEPT
# echo 1 > /proc/sys/net/ipv4/ip_forward

Network config: (required before beaglebone dns lookups will actually work)
-> Select usb ethernet interface
-> Select gear icon for settings.
-> Select identity
-> Firewall Zone -> trusted

Finally, turn off usb ethernet and reactivate it.


# Beaglebone 8.7 (non-gui) (jessie) setup:

- /boot/uEnv.txt:
    # AuraUAS
    cape_disable=bone_capemgr.disable_partno=BB-BONELT-HDMI,BB-BONELT-HDMIN
    cape_enable=bone_capemgr.enable_partno=BB-UART1,BB-UART2,BB-UART4

# remove wicd (if gui image)
- apt remove python-wicd wicd-cli wicd wicd-curses wicd-daemon wicd-gtk wicd-kde

# then fix up /etc/network/interfaces for eth0 (if you want ethernet
  support, which can delay booting if not connected.)

# remove stuff we don't need that could cause performance disruptions

- apt remove --purge nodejs
- apt remove --purge apache2 apache2-bin apache2-data apache2-utils

# (if gui image?):

- apt remove --purge xrdp tightvncserver lxqt-common lxqt-panel lxqt-runner lxqt-session
- apt-get remove gnome-accessibility-themes gnome-icon-theme

# check/remove stuff that takes up disk space (if gui image?)
  - dpkg-query -W --showformat='${Installed-Size;10}\t${Package}\n' | sort -k1,1n
  - apt remove --purge ti-llvm-3.6 chromium-browser
  - apt remove --purge c9-core-installer libllvm3.9 ti-opencl firmware-am57xx-opencl-monitor bone101 oxygen-icon-theme
  - apt remove upm libllvm3.5

# Remove any abandoned packages (installed previously to support
# something that was removed and is no longer needed.)

  - apt-get autoremove

# Download the available package databases:

  - apt update

# Upgrade system to latest security and bug fix patches (caution,
# lately has been screwing up the usb/ethernet interface) might want
# to skip the udpate/upgrade step.

  caution --> apt upgrade <-- caution

# Install extra required and/or useful things

- apt install telnet minicom python-lxml libeigen3-dev zlib1g-dev
- apt install libboost-python-dev (may no longer need?)


# Force highest peformance mode

- edit file: /etc/init.d/cpufrequtils (line #43)

  GOVERNOR="performance"


# Upgrade stock kernel (for sure do this for older wheezy install to
  get far better uart performance)

  http://elinux.org/Beagleboard:BeagleBoneBlack_Debian#Kernel_Upgrade

  cd /opt/scripts/tools/
  git pull
  ./update_kernel.sh
  reboot

  linux-firmware-image-4.4.68-ti-r109 (1jessie)


# setup onboard software repositories (note choice of referencing
# github repositories directly, but requires net access to update
# versus referencing a local --mirror repository which doesn't require
# internet access, just visibility to a host via usb network, but
# requires setting up and maintaining the --mirror repositories.)

  mkdir Source
  cd Source
  git clone curt@192.168.7.1:GIT/navigation.git
  git clone curt@192.168.7.1:GIT/aura-props.git
  git clone curt@192.168.7.1:GIT/aura-data.git
  git clone curt@192.168.7.1:GIT/aura-core.git

  # finding the software repositories on the web: https://github.com/AuraUAS
  mkdir Source
  cd Source
  git clone https://github.com/AuraUAS/navigation.git
  git clone https://github.com/AuraUAS/aura-props.git
  git clone https://github.com/AuraUAS/aura-data.git
  git clone https://github.com/AuraUAS/aura-core.git 


# build/install aura-props package

  cd aura-props/
  ./setup.py build
  sudo ./setup.py install
  
# build/install 'navigation' package (no longer needed, please skip)

  # setup swap file first
  sudo mkdir -p /var/cache/swap/
  sudo dd if=/dev/zero of=/var/cache/swap/swapfile bs=1M count=768 (size in MB)
  sudo chmod 0600 /var/cache/swap/swapfile
  sudo mkswap /var/cache/swap/swapfile
  sudo swapon /var/cache/swap/swapfile

  cd navigation
  ./setup.py build
  sudo ./setup.py install
  
  # remove swap file (to free up a big chunk of disk space):
  sudo swapoff /var/cache/swap/swapfile
  sudo rm /var/cache/swap/swapfile

# build/install aura-core package

  cd aura-core
  ./autogen.sh
  mkdir build; cd build
  ../configure --prefix=/usr/local/AuraUAS CFLAGS="-Wall -O3" CXXFLAGS="-Wall -O3"
  make
  sudo make install

# setup FlightData directory

  sudo mkdir /usr/local/AuraUAS/FlightData
  
# configuration

  sudo ln -s /home/aura/Source/aura-config/config /usr/local/AuraUAS/config

  (then as aura$)
  cd ~/Source/aura-config/config
  ln -s main-<aircraft_name>.json main.json

# test run (assuming Goldy3 cape w/ Aura3 firmware is installed)
# verify imu info is updating at minimum, overall update rates, load
# avg if gps connected, verify gps position and ekf orientation

  sudo bash
  cd
  /usr/local/AuraUAS/bin/aura --python_path /home/aura/Source/aura-core/src --config /usr/local/AuraUAS/config/ --display on
  
# setup the systemd autorun scripts